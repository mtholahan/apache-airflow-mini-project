x-airflow-common: &airflow-common
  image: apache/airflow:2.9.0-python3.12
  build:
    context: .
    dockerfile: Dockerfile.dev
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__STORE_SERIALIZED_DAGS: 'true'
    AIRFLOW__WEBSERVER__PARSE_DAGS_IN_WEBSERVER: 'false'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./scripts:/opt/airflow/scripts
    - ./logs:/opt/airflow/logs
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 10
      start_period: 30s

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  airflow-init:
    <<: *airflow-common
    entrypoint: >
      bash -c "airflow db init && \
               airflow users create --username admin --firstname Mark --lastname Holahan --role Admin --email markholahan@pm.me --password admin"
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    command: webserver

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: scheduler

  airflow-worker:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: celery worker

  airflow-triggerer:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: triggerer

  airflow-flower:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "5555:5555"
    command: celery flower

volumes:
  postgres-db-volume:
